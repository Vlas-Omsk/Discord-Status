<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
        xmlns:local="clr-namespace:WarfaceStatusGUI"
        xmlns:converters="clr-namespace:WarfaceStatusGUI.Converters"
        xmlns:controls="clr-namespace:WarfaceStatusGUI.Controls"
        xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" x:Name="window" x:Class="WarfaceStatusGUI.MainWindow"
        mc:Ignorable="d"
        Title="Discord Status" Height="450" Width="800" ResizeMode="CanResize"
        MinHeight="420" MinWidth="560"
        WindowStyle="SingleBorderWindow"
        AllowsTransparency="False"
        StateChanged="WindowStateChanged"
        SizeChanged="WindowSizeChanged"
        WindowStartupLocation="CenterScreen"
        Loaded="Window_Loaded">

    <Window.Resources>
        <Style x:Key="TopButtonMinimizeStyle" TargetType="{x:Type Button}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="btn"
                              Background="{TemplateBinding Background}" Cursor="Hand" ForceCursor="True">
                            <ContentControl Content="{TemplateBinding Content}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="btn" Property="Background" Value="#FF282B2E"/>
                            </Trigger>
                            <Trigger Property="IsMouseCaptured" Value="True">
                                <Setter TargetName="btn" Property="Background" Value="#FF2B2E32"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TopButtonCloseStyle" TargetType="{x:Type Button}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="btn"
                              Background="{TemplateBinding Background}" Cursor="Hand" ForceCursor="True">
                            <ContentControl Content="{TemplateBinding Content}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="btn" Property="Background" Value="#FFF04747"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
        <Style x:Key="TextBoxRounded" TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#00000000"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ButtonStyleBlue" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/-->
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <!--Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/-->
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/-->
                            </Trigger>
                            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                                <!--Setter Property="Background" TargetName="border" Value="#5b6eae"/-->
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#677bc4" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                                <!--Setter Property="Background" TargetName="border" Value="#5b6eae"/-->
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#7289da" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="UIElement.PreviewMouseDown">
                                <!--Setter Property="Background" TargetName="border" Value="#5b6eae"/-->
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#5b6eae" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="UIElement.PreviewMouseUp">
                                <!--Setter Property="Background" TargetName="border" Value="#5b6eae"/-->
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#677bc4"
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/-->
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ButtonStyleGreen" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="#4f8754"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/-->
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <!--Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/-->
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/-->
                            </Trigger>
                            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                                <!--Setter Property="Background" TargetName="border" Value="#5b6eae"/-->
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#62c26a" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                                <!--Setter Property="Background" TargetName="border" Value="#5b6eae"/-->
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#4f8754" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="UIElement.PreviewMouseDown">
                                <!--Setter Property="Background" TargetName="border" Value="#5b6eae"/-->
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#52bc5b" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="UIElement.PreviewMouseUp">
                                <!--Setter Property="Background" TargetName="border" Value="#5b6eae"/-->
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="#62c26a"
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <!--Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/-->
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <LinearGradientBrush x:Key="TabItem.Static.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#00000000" Offset="0.0"/>
            <GradientStop Color="#00000000" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="TabItem.Static.Border" Color="#00000000"/>
        <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#00000000" Offset="0.0"/>
            <GradientStop Color="#00000000" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#00000000"/>
        <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#00000000"/>
        <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#00000000"/>
        <SolidColorBrush x:Key="TabItem.Selected.Border" Color="Red"/>
        <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#00000000"/>
        <Style x:Key="TabItemStyleDiscord" TargetType="{x:Type TabItem}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Background" Value="{StaticResource TabItem.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Width" Value="82"/>
            <Setter Property="Height" Value="42"/>
            <Setter Property="Padding" Value="16,12,16,12"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                            <Border x:Name="mainBorder" BorderBrush="Transparent" BorderThickness="1,1,1,0" Background="Transparent" Margin="0">
                                <Canvas VerticalAlignment="Stretch">
                                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}">
                                        <Rectangle x:Name="innerBorder" Margin="0,0,0,2" Width="50" Height="2" RadiusX="1" RadiusY="1" Fill="{TemplateBinding BorderBrush}" Opacity="0" HorizontalAlignment="Center" VerticalAlignment="Bottom">
                                            <Rectangle.RenderTransform>
                                                <TranslateTransform X="0" Y="0"/>
                                            </Rectangle.RenderTransform>
                                        </Rectangle>
                                        <Rectangle Margin="0,0,0,2" Height="4" Fill="{TemplateBinding Background}" Opacity="1" HorizontalAlignment="Stretch" VerticalAlignment="Bottom">
                                            <Rectangle.RenderTransform>
                                                <TranslateTransform X="0" Y="5"/>
                                            </Rectangle.RenderTransform>
                                        </Rectangle>
                                        <Rectangle x:Name="innerBorder2" Margin="0,0,0,8" Width="50" Height="2" RadiusX="1" RadiusY="1" Fill="{TemplateBinding BorderBrush}" Opacity="0" HorizontalAlignment="Center" VerticalAlignment="Bottom">
                                            <Rectangle.BitmapEffect>
                                                <BlurBitmapEffect Radius="14"/>
                                            </Rectangle.BitmapEffect>
                                        </Rectangle>
                                    </Grid>
                                </Canvas>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="RenderTransform" TargetName="innerBorder">
                                    <Setter.Value>
                                        <TranslateTransform X="0" Y="5"/>
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                </MultiDataTrigger.Conditions>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Margin" Value="-2,-2,0,-2"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                <Setter Property="Opacity" TargetName="innerBorder2" Value="1"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                </MultiDataTrigger.Conditions>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Margin" Value="-2,0,-2,-2"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                <Setter Property="Opacity" TargetName="innerBorder2" Value="1"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                </MultiDataTrigger.Conditions>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Margin" Value="0,-2,-2,-2"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                <Setter Property="Opacity" TargetName="innerBorder2" Value="1"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                </MultiDataTrigger.Conditions>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Margin" Value="-2,-2,-2,0"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                <Setter Property="Opacity" TargetName="innerBorder2" Value="1"/>
                                <!--Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/-->
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                            </MultiDataTrigger>
                            <EventTrigger RoutedEvent="UIElement.PreviewMouseLeftButtonUp">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="innerBorder2"
                                                From="0" To="1" Duration="0:0:0.1"  /-->
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="innerBorder"
                                                From="5" To="0" Duration="0:0:0.1"  />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="innerBorder2"
                                                From="0" To="1" Duration="0:0:0.1"  /-->
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="innerBorder"
                                                From="5" To="0" Duration="0:0:0.1"  />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False">
                                <Setter Property="Foreground" Value="#b9bbbe"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="TabItem.Selected.Background2" Color="#FF18191C"/>
        <SolidColorBrush x:Key="TabItem.Selected.Border2" Color="#00ACACAC"/>

        <Style x:Key="TabControlStyleDiscord" TargetType="{x:Type TabControl}">
            <Setter Property="Padding" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Border}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0"/>
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                                <RowDefinition x:Name="RowDefinition1" Height="*"/>
                            </Grid.RowDefinitions>
                            <Border Grid.ColumnSpan="2" Grid.Row="1" Grid.RowSpan="1" CornerRadius="0,0,5,5" Background="{TemplateBinding Background}" Margin="0,-2,0,0"/>
                            <Border Grid.ColumnSpan="2" Grid.Row="0" Grid.RowSpan="1" CornerRadius="5,5,0,0" Background="{TemplateBinding Foreground}" Margin="0,0,0,2"/>

                            <TabPanel x:Name="headerPanel" Background="{TemplateBinding Foreground}" Grid.Column="0" Grid.Row="0" IsItemsHost="true" Margin="5" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                            <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" Margin="0">
                                <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TabStripPlacement" Value="Bottom">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Left">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Right">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ScrollViewerControlTemplateDiscord" TargetType="{x:Type controls:SmoothScrollViewer}">
            <Setter Property="ScrollingTime" Value="00:00:00.5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type controls:SmoothScrollViewer}">
                        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Rectangle x:Name="Corner" Visibility="Hidden" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                            <ScrollBar x:Name="PART_AniVerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{DynamicResource ScrollBarStyleDiscord}"/>
                            <ScrollBar x:Name="PART_AniHorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="ScrollBar.Static.Background" Color="#F0F0F0"/>
        <SolidColorBrush x:Key="ScrollBar.Static.Border" Color="#F0F0F0"/>
        <SolidColorBrush x:Key="ScrollBar.Pressed.Glyph" Color="#FFFFFF"/>
        <SolidColorBrush x:Key="ScrollBar.MouseOver.Glyph" Color="#000000"/>
        <SolidColorBrush x:Key="ScrollBar.Disabled.Glyph" Color="#BFBFBF"/>
        <SolidColorBrush x:Key="ScrollBar.Static.Glyph" Color="#606060"/>
        <SolidColorBrush x:Key="ScrollBar.MouseOver.Background" Color="#DADADA"/>
        <SolidColorBrush x:Key="ScrollBar.MouseOver.Border" Color="#DADADA"/>
        <SolidColorBrush x:Key="ScrollBar.Pressed.Background" Color="#606060"/>
        <SolidColorBrush x:Key="ScrollBar.Pressed.Border" Color="#606060"/>
        <SolidColorBrush x:Key="ScrollBar.Disabled.Background" Color="#F0F0F0"/>
        <SolidColorBrush x:Key="ScrollBar.Disabled.Border" Color="#F0F0F0"/>
        <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border x:Name="border" BorderBrush="{StaticResource ScrollBar.Static.Border}" BorderThickness="1" Background="{StaticResource ScrollBar.Static.Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource ScrollBar.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ScrollBar.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource ScrollBar.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ScrollBar.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                <Setter Property="Background" TargetName="border" Value="{StaticResource ScrollBar.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ScrollBar.Disabled.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="#FF202225"/>
        <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="#FF202225"/>
        <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="#FF202225"/>
        <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Rectangle x:Name="rectangle" RadiusX="5" RadiusY="5" Fill="{StaticResource ScrollBar.Static.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}"/>
                            </Trigger>
                            <Trigger Property="IsDragging" Value="true">
                                <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Rectangle x:Name="rectangle" Fill="{StaticResource ScrollBar.Static.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}"/>
                            </Trigger>
                            <Trigger Property="IsDragging" Value="true">
                                <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarStyleDiscord" TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Background" Value="#FF2F3136"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1,0"/>
            <Setter Property="Width" Value="7"/>
            <Setter Property="MinWidth" Value="7"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="Bg" SnapsToDevicePixels="true">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" Height="11*"/>
                                <RowDefinition Height="404*"/>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" Height="11*"/>
                            </Grid.RowDefinitions>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Background="{TemplateBinding Background}" Grid.Row="1"/>
                            <RepeatButton Visibility="Hidden" x:Name="PART_LineUpButton" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}" Margin="0" Grid.RowSpan="1">
                                <Path x:Name="ArrowTop" Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z" Fill="{StaticResource ScrollBar.Static.Glyph}" Margin="3,4,3,3" Stretch="Uniform"/>
                            </RepeatButton>
                            <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
                                </Track.Thumb>
                            </Track>
                            <RepeatButton Visibility="Hidden" x:Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Style="{StaticResource ScrollBarButton}">
                                <Path x:Name="ArrowBottom" Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z" Fill="{StaticResource ScrollBar.Static.Glyph}" Margin="3,4,3,3" Stretch="Uniform"/>
                            </RepeatButton>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Fill" TargetName="ArrowBottom" Value="{StaticResource ScrollBar.Pressed.Glyph}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Fill" TargetName="ArrowTop" Value="{StaticResource ScrollBar.Pressed.Glyph}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Fill" TargetName="ArrowBottom" Value="{StaticResource ScrollBar.MouseOver.Glyph}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Fill" TargetName="ArrowTop" Value="{StaticResource ScrollBar.MouseOver.Glyph}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="ArrowTop" Value="{StaticResource ScrollBar.Disabled.Glyph}"/>
                                <Setter Property="Fill" TargetName="ArrowBottom" Value="{StaticResource ScrollBar.Disabled.Glyph}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="MinWidth" Value="0"/>
                    <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                    <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                    <Setter Property="BorderThickness" Value="0,1"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                        <ColumnDefinition Width="0.00001*"/>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    </Grid.ColumnDefinitions>
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1"/>
                                    <RepeatButton x:Name="PART_LineLeftButton" Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                                        <Path x:Name="ArrowLeft" Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z" Fill="{StaticResource ScrollBar.Static.Glyph}" Margin="3" Stretch="Uniform"/>
                                    </RepeatButton>
                                    <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
                                        </Track.Thumb>
                                    </Track>
                                    <RepeatButton x:Name="PART_LineRightButton" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                                        <Path x:Name="ArrowRight" Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z" Fill="{StaticResource ScrollBar.Static.Glyph}" Margin="3" Stretch="Uniform"/>
                                    </RepeatButton>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                            <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Fill" TargetName="ArrowRight" Value="{StaticResource ScrollBar.Pressed.Glyph}"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                            <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Fill" TargetName="ArrowLeft" Value="{StaticResource ScrollBar.Pressed.Glyph}"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                            <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="false"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Fill" TargetName="ArrowRight" Value="{StaticResource ScrollBar.MouseOver.Glyph}"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                            <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="false"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Fill" TargetName="ArrowLeft" Value="{StaticResource ScrollBar.MouseOver.Glyph}"/>
                                    </MultiDataTrigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Fill" TargetName="ArrowLeft" Value="{StaticResource ScrollBar.Disabled.Glyph}"/>
                                        <Setter Property="Fill" TargetName="ArrowRight" Value="{StaticResource ScrollBar.Disabled.Glyph}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <SolidColorBrush x:Key="RadioButton.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="RadioButton.Static.Border" Color="#FF707070"/>
        <Style x:Key="OptionMarkFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="#FFF3F9FF"/>
        <SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="#FF5593FF"/>
        <SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="#FF707070"/>
        <SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="#FFD9ECFF"/>
        <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="#FF3C77DD"/>
        <SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="#FF212121"/>
        <Style x:Key="RadioButtonStyleRounded" TargetType="{x:Type RadioButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid  x:Name="radioButtonBorder" SnapsToDevicePixels="true" >
                                <!--to #FF7289DA-->
                                <Rectangle x:Name="bg2_rect" RadiusX="{Binding RadiusX, ElementName=bg_rect}" RadiusY="{Binding RadiusY, ElementName=bg_rect}" Fill="#FF36393F"/>
                                <Rectangle x:Name="bg_rect" RadiusX="30" RadiusY="30" Fill="{TemplateBinding Background}"/>

                                <!--Default rX = 4, rY = 4, h = 20, w = 8 -->
                                <Rectangle x:Name="sel" RadiusX="10" RadiusY="10" Fill="White" Height="20" Width="8" HorizontalAlignment="Left" RenderTransformOrigin="0.5,0.5">
                                    <Rectangle.RenderTransform>
                                        <TranslateTransform X="-20" Y="0"/>
                                    </Rectangle.RenderTransform>
                                </Rectangle>

                                <Grid x:Name="ContentBlock" IsHitTestVisible="False" Opacity="0" Width="{Binding ActualWidth, ConverterParameter=-5, Converter={converters:MinusConverter}, ElementName=contentPresenter}" Height="{Binding ActualHeight, ConverterParameter=-5, Converter={converters:MinusConverter}, ElementName=contentPresenter}" RenderTransformOrigin="0,0.5" HorizontalAlignment="Left" Margin="-200,0,0,0" VerticalAlignment="Center">
                                    <Grid.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="0.8" ScaleY="0.8"/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform X="270" Y="0"/>
                                        </TransformGroup>
                                    </Grid.RenderTransform>
                                    <Rectangle Fill="Black" Margin="-2,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Height="5" Width="5" RenderTransformOrigin="0.5,0.5" >
                                        <Rectangle.RenderTransform>
                                            <RotateTransform Angle="45"/>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                    <Rectangle RadiusX="4" RadiusY="4" Fill="Black" Width="{Binding ActualWidth, ElementName=ContentBlock}" Height="{Binding ActualHeight, ElementName=ContentBlock}"/>
                                    <TextBlock x:Name="contentPresenter" Padding="4,4,4,4" Text="{TemplateBinding Content}" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White" FontWeight="Bold" FontSize="14"/>
                                </Grid>
                            </Grid>
                            <Ellipse x:Name="optionMark"/>

                            <!--ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/-->
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                <Setter Property="Padding" Value="4,-1,0,0"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Background}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}"/>
                            </Trigger>

                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Margin" TargetName="templateRoot" Value="0,1,0,-1"/>
                            </Trigger>

                            <!--CONTENT-->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard >
                                            <DoubleAnimation Storyboard.TargetName="ContentBlock" Storyboard.TargetProperty="Opacity" Duration="0:0:0.1" To="1" />
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ContentBlock"  Duration="0:0:0.1" To="1" />
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ContentBlock"  Duration="0:0:0.1" To="1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard >
                                            <DoubleAnimation Storyboard.TargetName="ContentBlock" Storyboard.TargetProperty="Opacity" Duration="0:0:0.1" To="0" />
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ContentBlock"  Duration="0:0:0.1" To="0.8" />
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ContentBlock"  Duration="0:0:0.1" To="0.8" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <!--CONTENT-->

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard >
                                            <DoubleAnimation Storyboard.TargetName="bg_rect" Storyboard.TargetProperty="RadiusX" Duration="0:0:0.1" To="15" />
                                            <DoubleAnimation Storyboard.TargetName="bg_rect" Storyboard.TargetProperty="RadiusY" Duration="0:0:0.1" To="15" />
                                            <ColorAnimation Storyboard.TargetName="bg2_rect" Storyboard.TargetProperty="(Fill).(SolidColorBrush.Color)" Duration="0:0:0.1" To="#FF7289DA" />

                                            <DoubleAnimation Storyboard.TargetName="sel" Storyboard.TargetProperty="RadiusX" Duration="0:0:0.1" To="4" />
                                            <DoubleAnimation Storyboard.TargetName="sel" Storyboard.TargetProperty="RadiusY" Duration="0:0:0.1" To="4" />
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="sel"  Duration="0:0:0.1" To="-15" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard >
                                            <DoubleAnimation Storyboard.TargetName="bg_rect" Storyboard.TargetProperty="RadiusX" Duration="0:0:0.1" To="30" />
                                            <DoubleAnimation Storyboard.TargetName="bg_rect" Storyboard.TargetProperty="RadiusY" Duration="0:0:0.1" To="30" />
                                            <ColorAnimation Storyboard.TargetName="bg2_rect" Storyboard.TargetProperty="(Fill).(SolidColorBrush.Color)" Duration="0:0:0.1" To="#FF36393F" />

                                            <DoubleAnimation Storyboard.TargetName="sel" Storyboard.TargetProperty="RadiusX" Duration="0:0:0.1" To="10" />
                                            <DoubleAnimation Storyboard.TargetName="sel" Storyboard.TargetProperty="RadiusY" Duration="0:0:0.1" To="10" />
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="sel"  Duration="0:0:0.1" To="-20" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard >
                                            <DoubleAnimation Storyboard.TargetName="bg_rect" Storyboard.TargetProperty="RadiusX" Duration="0:0:0.1" To="15" />
                                            <DoubleAnimation Storyboard.TargetName="bg_rect" Storyboard.TargetProperty="RadiusY" Duration="0:0:0.1" To="15" />
                                            <ColorAnimation Storyboard.TargetName="bg2_rect" Storyboard.TargetProperty="(Fill).(SolidColorBrush.Color)" Duration="0:0:0.1" To="#FF7289DA" />

                                            <DoubleAnimation Storyboard.TargetName="sel" Storyboard.TargetProperty="RadiusX" Duration="0:0:0.1" To="4" />
                                            <DoubleAnimation Storyboard.TargetName="sel" Storyboard.TargetProperty="RadiusY" Duration="0:0:0.1" To="4" />
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="sel"  Duration="0:0:0.1" To="-15" />
                                            <DoubleAnimation Storyboard.TargetProperty="Height" Storyboard.TargetName="sel"  Duration="0:0:0.1" To="40" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard FillBehavior="Stop">
                                            <DoubleAnimation Storyboard.TargetName="bg_rect" Storyboard.TargetProperty="RadiusX" Duration="0:0:0.1" To="30" />
                                            <DoubleAnimation Storyboard.TargetName="bg_rect" Storyboard.TargetProperty="RadiusY" Duration="0:0:0.1" To="30" />
                                            <ColorAnimation Storyboard.TargetName="bg2_rect" Storyboard.TargetProperty="(Fill).(SolidColorBrush.Color)" Duration="0:0:0.1" To="#FF36393F" />

                                            <DoubleAnimation Storyboard.TargetName="sel" Storyboard.TargetProperty="RadiusX" Duration="0:0:0.1" To="10" />
                                            <DoubleAnimation Storyboard.TargetName="sel" Storyboard.TargetProperty="RadiusY" Duration="0:0:0.1" To="10" />
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="sel"  Duration="0:0:0.1" To="-20" />
                                            <DoubleAnimation Storyboard.TargetProperty="Height" Storyboard.TargetName="sel"  Duration="0:0:0.1" To="20" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
        <Style x:Key="CheckBoxStyleDiscord" TargetType="{x:Type CheckBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="#72767d"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid x:Name="markGrid">
                                    <Border x:Name="indeterminateMark" Width="42" Height="24" CornerRadius="12" Background="{TemplateBinding Background}"/>
                                    <Rectangle x:Name="optionMark" Width="18" Height="18" Fill="White" RenderTransformOrigin="0.5,0.5" RadiusX="10" RadiusY="10">
                                        <Rectangle.RenderTransform>
                                            <TranslateTransform X="-9"/>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                    <!--Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                                    <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/-->
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                <Setter Property="Padding" Value="4,-1,0,0"/>
                            </Trigger>

                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard >
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="optionMark"  Duration="0:0:0.1" To="9" />
                                            <ColorAnimation Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)" Storyboard.TargetName="indeterminateMark"  Duration="0:0:0.1" To="#7289da" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard >
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="optionMark"  Duration="0:0:0.1" To="-9" />
                                            <ColorAnimation Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)" Storyboard.TargetName="indeterminateMark"  Duration="0:0:0.1" To="#72767d" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="True"/>
                                    <Condition Property="IsChecked" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard >
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="optionMark"  Duration="0:0:0.1" To="-6" />
                                            <DoubleAnimation Storyboard.TargetProperty="Width" Storyboard.TargetName="optionMark"  Duration="0:0:0.1" To="24" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard FillBehavior="Stop">
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="optionMark"  Duration="0:0:0.1" To="9" />
                                            <DoubleAnimation Storyboard.TargetProperty="Width" Storyboard.TargetName="optionMark"  Duration="0:0:0.1" To="18" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard >
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="optionMark"  Duration="0:0:0.1" To="6" />
                                            <DoubleAnimation Storyboard.TargetProperty="Width" Storyboard.TargetName="optionMark"  Duration="0:0:0.1" To="24" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard FillBehavior="Stop">
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="optionMark"  Duration="0:0:0.1" To="-9" />
                                            <DoubleAnimation Storyboard.TargetProperty="Width" Storyboard.TargetName="optionMark"  Duration="0:0:0.1" To="18" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="SliderThumb.Static.Foreground" Color="#FFE5E5E5"/>
        <SolidColorBrush x:Key="SliderThumb.MouseOver.Background" Color="#f7f7f7"/>
        <SolidColorBrush x:Key="SliderThumb.MouseOver.Border" Color="#FF7Eb4EA"/>
        <SolidColorBrush x:Key="SliderThumb.Pressed.Background" Color="#FFDAECFC"/>
        <SolidColorBrush x:Key="SliderThumb.Pressed.Border" Color="#FF569DE5"/>
        <SolidColorBrush x:Key="SliderThumb.Disabled.Background" Color="#FFF0F0F0"/>
        <SolidColorBrush x:Key="SliderThumb.Disabled.Border" Color="#FFD9D9D9"/>
        <SolidColorBrush x:Key="SliderThumb.Static.Background" Color="#FFF0F0F0"/>
        <SolidColorBrush x:Key="SliderThumb.Static.Border" Color="#FFACACAC"/>
        <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
            <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                <Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsDragging" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
            <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                <Path x:Name="grip" Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsDragging" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <SolidColorBrush x:Key="SliderThumb.Track.Border" Color="#FFD6D6D6"/>
        <SolidColorBrush x:Key="SliderThumb.Track.Background" Color="#FFE7EAEA"/>
        <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
            <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center" Cursor="SizeWE">
                <Border x:Name="grip" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" CornerRadius="3,3,3,3" Background="{StaticResource SliderThumb.Static.Background}"  SnapsToDevicePixels="True" BorderBrush="{StaticResource SliderThumb.Static.Border}" BorderThickness="0" UseLayoutRounding="True" VerticalAlignment="Center"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                    <Setter Property="BorderBrush" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Background" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                    <Setter Property="BorderBrush" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
                    <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                    <Border x:Name="TrackBackground" Visibility="Hidden" BorderBrush="{StaticResource SliderThumb.Track.Border}" BorderThickness="1" Background="{StaticResource SliderThumb.Track.Background}" Height="4.0" Margin="5,0" Grid.Row="1" VerticalAlignment="center">
                        <Canvas Margin="-6,-1">
                            <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="4.0" Visibility="Hidden"/>
                        </Canvas>
                    </Border>

                    <Grid x:Name="ContentBlock" IsHitTestVisible="False" Grid.Row="1" Opacity="0" Width="{Binding ActualWidth, ConverterParameter=-5, Converter={converters:MinusConverter}, ElementName=contentPresenter}" Height="{Binding ActualHeight, ConverterParameter=-5, Converter={converters:MinusConverter}, ElementName=contentPresenter}" RenderTransformOrigin="0,1" HorizontalAlignment="Left" VerticalAlignment="Center">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="0.8" ScaleY="0.8"/>
                                <SkewTransform/>
                                <RotateTransform/>
                                <TranslateTransform Y="-34" X="{Binding ActualWidth, ElementName=Left}"/>
                            </TransformGroup>
                        </Grid.RenderTransform>

                        <Grid RenderTransformOrigin="0.5,0.5">
                            <Grid.RenderTransform>
                                <TranslateTransform X="{Binding ActualWidth, ConverterParameter=-0\,5, Converter={converters:PercentageConverter}, ElementName=asokhmiregi3825h7}"/>
                            </Grid.RenderTransform>
                            <Grid>
                                <Grid.RenderTransform>
                                    <TranslateTransform X="{Binding ActualWidth, ConverterParameter=0\,5, Converter={converters:PercentageConverter}, ElementName=Thumb}"/>
                                </Grid.RenderTransform>
                                <Rectangle Fill="Black" Margin="0,0,0,-2" HorizontalAlignment="Center" VerticalAlignment="Bottom" Height="5" Width="5" RenderTransformOrigin="0.5,0.5" >
                                    <Rectangle.RenderTransform>
                                        <RotateTransform Angle="45"/>
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                                <Rectangle x:Name="asokhmiregi3825h7" RadiusX="4" RadiusY="4" Fill="Black" Width="{Binding ActualWidth, ElementName=ContentBlock}" Height="{Binding ActualHeight, ElementName=ContentBlock}" HorizontalAlignment="Stretch"/>
                                <TextBlock x:Name="contentPresenter" Padding="4,4,4,4" Text="{TemplateBinding ConverterParameter=[DoubleValue.Round]%, Converter={converters:StringConverter}, Property=Value}" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White" FontSize="14"/>
                            </Grid>
                        </Grid>
                    </Grid>

                    <Border Background="#7289da" Height="8.0" Margin="5,0" CornerRadius="5,5,5,5" Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Left" Width="{Binding ActualWidth, ElementName=Left}"/>
                    <Border Background="#4f545c" Height="8.0" Margin="5,0" CornerRadius="5,5,5,5" Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Right" Width="{Binding ActualWidth, ElementName=Right}"/>

                    <Track x:Name="PART_Track" Grid.Row="1">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton x:Name="Left" Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton x:Name="Right" Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb x:Name="Thumb" Focusable="False" Height="24" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbHorizontalDefault}" VerticalAlignment="Center" Width="11"/>
                        </Track.Thumb>
                    </Track>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>

                <!--CONTENT-->
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard >
                                <DoubleAnimation Storyboard.TargetName="ContentBlock" Storyboard.TargetProperty="Opacity" Duration="0:0:0.1" To="1" />
                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ContentBlock"  Duration="0:0:0.1" To="1" />
                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ContentBlock"  Duration="0:0:0.1" To="1" />
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.EnterActions>
                    <MultiTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard >
                                <DoubleAnimation Storyboard.TargetName="ContentBlock" Storyboard.TargetProperty="Opacity" Duration="0:0:0.1" To="0" />
                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="ContentBlock"  Duration="0:0:0.1" To="0.8" />
                                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="ContentBlock"  Duration="0:0:0.1" To="0.8" />
                            </Storyboard>
                        </BeginStoryboard>
                    </MultiTrigger.ExitActions>
                </MultiTrigger>
                <!--CONTENT-->

                <Trigger Property="TickPlacement" Value="TopLeft">
                    <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                    <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalTop}"/>
                    <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
                </Trigger>
                <Trigger Property="TickPlacement" Value="BottomRight">
                    <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                    <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalBottom}"/>
                    <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
                </Trigger>
                <Trigger Property="TickPlacement" Value="Both">
                    <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                </Trigger>
                <Trigger Property="IsSelectionRangeEnabled" Value="true">
                    <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
            <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                <Path x:Name="grip" Data="M 6,11 C6,11 0,5.5 0,5.5 0,5.5 6,0 6,0 6,0 18,0 18,0 18,0 18,11 18,11 18,11 6,11 6,11 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" Stroke="{StaticResource SliderThumb.Static.Border}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsDragging" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type Thumb}">
            <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                <Path x:Name="grip" Data="M 12,11 C12,11 18,5.5 18,5.5 18,5.5 12,0 12,0 12,0 0,0 0,0 0,0 0,11 0,11 0,11 12,11 12,11 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" Stroke="{StaticResource SliderThumb.Static.Border}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsDragging" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="SliderThumbVerticalDefault" TargetType="{x:Type Thumb}">
            <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
                <Path x:Name="grip" Data="M0.5,0.5 L18.5,0.5 18.5,11.5 0.5,11.5z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" Stroke="{StaticResource SliderThumb.Static.Border}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsDragging" Value="true">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                    <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4"/>
                    <TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4"/>
                    <Border  x:Name="TrackBackground" BorderBrush="{StaticResource SliderThumb.Track.Border}" BorderThickness="1" Background="{StaticResource SliderThumb.Track.Background}" Grid.Column="1" HorizontalAlignment="center" Margin="0,5" Width="4.0">
                        <Canvas Margin="-1,-6">
                            <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Visibility="Hidden" Width="4.0"/>
                        </Canvas>
                    </Border>
                    <Track x:Name="PART_Track"  Grid.Column="1">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb x:Name="Thumb" Focusable="False" Height="11" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbVerticalDefault}" VerticalAlignment="Top" Width="18"/>
                        </Track.Thumb>
                    </Track>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="TickPlacement" Value="TopLeft">
                    <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                    <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalLeft}"/>
                    <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5"/>
                </Trigger>
                <Trigger Property="TickPlacement" Value="BottomRight">
                    <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                    <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalRight}"/>
                    <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5"/>
                </Trigger>
                <Trigger Property="TickPlacement" Value="Both">
                    <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                </Trigger>
                <Trigger Property="IsSelectionRangeEnabled" Value="true">
                    <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="SliderStyleDiscord" TargetType="{x:Type Slider}">
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource SliderThumb.Static.Foreground}"/>
            <Setter Property="Template" Value="{StaticResource SliderHorizontal}"/>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Template" Value="{StaticResource SliderVertical}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <SolidColorBrush x:Key="Button.Static.Border2" Color="#FF707070"/>
        <Style x:Key="ButtonStyleDiscordNotify" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#FFDADCE0"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF80868B"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="RadioButtonStyleBlueGreen" TargetType="{x:Type RadioButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border x:Name="border" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <!-- GREEN -->
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation To="#62c26a" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard FillBehavior="Stop">
                                            <ColorAnimation To="#4f8754" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation To="#52bc5b" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard FillBehavior="Stop">
                                            <ColorAnimation To="#62c26a"
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <!-- GREEN -->
                            <!-- BLUE -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation To="#677bc4" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard FillBehavior="Stop">
                                            <ColorAnimation To="#7289da" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="True"/>
                                    <Condition Property="IsChecked" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation To="#5b6eae" 
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard FillBehavior="Stop">
                                            <ColorAnimation To="#677bc4"
                                            Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" 
                                            Duration="0:0:0.1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiTrigger.ExitActions>
                            </MultiTrigger>
                            <!-- BLUE -->

                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" Value="#4f8754"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter Property="Background" Value="#7289da"/>
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="DataGridStyleDiscord" TargetType="{x:Type DataGrid}">
            <Setter Property="GridLinesVisibility" Value="None"/>
            <Setter Property="AlternationCount" Value="2"/>
            <Setter Property="Background" Value="#18191c"/>
            <Setter Property="SelectionUnit" Value="FullRow"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGrid}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="5" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                                <ScrollViewer.Template>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Style="{DynamicResource ResourceKey=DataGridColumnHeadersPresenterStyle1}"/>
                                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                            <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                            <Grid Grid.Column="1" Grid.Row="2">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </ScrollViewer.Template>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ColumnHeaderStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type DataGridColumnHeader}">
                        <Setter Property="FontWeight" Value="Bold"/>
                        <Setter Property="Background" Value="#202225"/>
                        <Setter Property="Foreground" Value="#c7d3d3"/>
                        <Setter Property="Padding" Value="8"/>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="RowHeaderStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type DataGridRowHeader}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate />
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="RowStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type DataGridRow}">
                        <Setter Property="Foreground" Value="#dcddde"/>
                        <Setter Property="Background" Value="#121315"/>
                        <Style.Triggers>
                            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                <Setter Property="Background" Value="#18191c"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="CellStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type DataGridCell}">
                        <Setter Property="Padding" Value="8"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type DataGridCell}">
                                    <Border Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="#d2d2d2"/>
                                <Setter Property="Foreground" Value="Black"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <Grid x:Name="MainGrid">
        <Grid.Background>
            <ImageBrush ImageSource="Resources/Background.jpg"/>
            <!--SolidColorBrush Color="#36393f"/-->
        </Grid.Background>

        <Grid x:Name="ActualSize" Visibility="Hidden" Height="{Binding ActualHeight, ConverterParameter=4, Converter={converters:MinusConverter}, ElementName=window}" Width="{Binding ActualWidth, ConverterParameter=12, Converter={converters:MinusConverter}, ElementName=window}"/>

        <Image x:Name="bg_abyss" Visibility="Visible" HorizontalAlignment="Left" Width="{Binding ActualWidth, ConverterParameter=0\,7, Converter={converters:PercentageConverter}, ElementName=ActualSize}" Height="{Binding ActualHeight, ConverterParameter=0\,7, Converter={converters:PercentageConverter}, ElementName=ActualSize}" VerticalAlignment="Top" Source="Resources/bg_noanim.png"/>

        <Canvas Visibility="Hidden" x:Name="InitForm" Height="300" Width="260" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
            <Grid Height="300" Width="260">
                <Rectangle HorizontalAlignment="Left" Margin="0,1,0,-1" VerticalAlignment="Top" Height="300" Width="260" RadiusX="7" RadiusY="7" Fill="#FF36393F"/>
                <Image Source="Resources/export_big_new.png" HorizontalAlignment="Center" VerticalAlignment="Top" Width="130" Margin="75,30,55,0" />
                <TextBlock Text="Инициализация" Margin="0,189,0,88" Foreground="White" FontSize="18" FontFamily="/WarfaceStatusGUI;component/Resources/#New_Zelek" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <TextBlock Text="Пожалуйста, подождите..." Margin="0,229,0,47" Foreground="#FF8A8E93" FontSize="10" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            </Grid>
        </Canvas>

        <Canvas Visibility="Hidden" x:Name="LoginForm" Height="380" Width="420" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
            <Grid Height="380" Width="420">
                <Rectangle HorizontalAlignment="Left" Height="380" Margin="0,1,0,-1" VerticalAlignment="Top" Width="420" Fill="#FF36393F" RadiusX="7" RadiusY="7"/>
                <TextBox x:Name="Email" Height="37" Margin="22,135,22,0" TextWrapping="Wrap" Width="376" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" TextChanged="Email_TextChanged" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                <TextBox x:Name="Passw" HorizontalAlignment="Center" Height="37" Margin="22,205,22,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="376" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" TextChanged="Passw_TextChanged"/>
                <Label x:Name="EmailLabel" Content="E-MAIL" HorizontalAlignment="Left" Margin="23,110,0,0" VerticalAlignment="Top" Height="22" Foreground="#FF8A8E93" FontSize="11" FontWeight="Bold"/>
                <Label x:Name="PasswLabel" Content="ПАРОЛЬ" HorizontalAlignment="Left" Margin="23,180,0,0" VerticalAlignment="Top" Height="22" Foreground="#FF8A8E93" FontSize="11" FontWeight="Bold"/>
                <Button x:Name="ButtonLogin" Background="#7289da" Foreground="White" BorderBrush="Transparent" Content="Вход" FontSize="14" FontWeight="Bold" HorizontalAlignment="Center" Margin="22,279,22,0" VerticalAlignment="Top" Width="376" Height="42" Style="{DynamicResource ButtonStyleBlue}" Click="ButtonLoginClick"/>
                <Label x:Name="PasswLabelInfo" Content="" HorizontalAlignment="Left" Margin="78,180,0,0" VerticalAlignment="Top" Height="22" Foreground="#FFF04D47" FontSize="10" FontStyle="Italic"/>
                <Label x:Name="EmailLabelInfo" Content="" Margin="78,110,0,0" VerticalAlignment="Top" Height="22" Foreground="#FFF04D47" FontSize="10" FontStyle="Italic" HorizontalAlignment="Left"/>
                <TextBlock HorizontalAlignment="Center" Margin="22,69,22,0" VerticalAlignment="Top" Foreground="#FFB8B8B8" Width="376" Height="36" TextWrapping="Wrap" TextAlignment="Center" Text="Войдите или создайте свой дискор аккаунт, чтобы приложение смогло установить вам статус."/>
                <TextBlock Text="Забыли пароль?" HorizontalAlignment="Left" Margin="29,244,0,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FF6A7EC5" Width="98" Height="16" FontWeight="Bold" MouseLeftButtonUp="ForgotPasswordClick" >
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property= "Foreground" Value="{x:Null}"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="TextDecorations" Value="Underline"/>
                                    <Setter Property="Cursor" Value="Hand"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <TextBlock Text="Нужна учётная запись?" HorizontalAlignment="Left" Margin="29,328,0,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FF6B6F76" Width="140" Height="16" FontWeight="Bold"/>
                <TextBlock Text="Зарегестрироваться" HorizontalAlignment="Left" Margin="174,328,0,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FF6A7EC5" Width="120" Height="16" FontWeight="Bold" MouseLeftButtonUp="RegistrationClick" >
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property= "Foreground" Value="{x:Null}"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="TextDecorations" Value="Underline"/>
                                    <Setter Property="Cursor" Value="Hand"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <TextBlock Text="Пропустить" HorizontalAlignment="Left" Margin="339,10,0,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FF6A7EC5" Width="71" Height="16" FontWeight="Bold" MouseLeftButtonUp="SkipClick" >
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property= "Foreground" Value="{x:Null}"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="TextDecorations" Value="Underline"/>
                                    <Setter Property="Cursor" Value="Hand"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <TextBlock x:Name="cat_emotion_login" HorizontalAlignment="Center" Margin="51,20,182,0" VerticalAlignment="Top" Foreground="#FFB8B8B8" Width="187" Height="36" TextWrapping="Wrap" TextAlignment="Center" Text="Мррр..." FontSize="18" FontWeight="Bold"/>
                <Image x:Name="cat_login" Source="/Resources/pixel_cat_reversed.png" Margin="42,19,0,0" HorizontalAlignment="Left" Width="66" Height="60" VerticalAlignment="Top" Cursor="Hand" MouseUp="CatLoginClick" />
            </Grid>
        </Canvas>

        <Canvas x:Name="CodeForm" Height="380" Width="420" Visibility="Hidden">
            <Grid Height="380" Width="420">
                <Rectangle HorizontalAlignment="Left" Height="380" Margin="0" VerticalAlignment="Top" Width="420" Fill="#FF36393F" RadiusX="7" RadiusY="7"/>
                <TextBox x:Name="Code"  HorizontalAlignment="Center" Height="37" Margin="22,225,22,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="376" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" TextChanged="Code_TextChanged"/>
                <Label x:Name="CodeLabel" Content="ВВЕДИТЕ КОД АУТЕНТИФИКАЦИИ ИЛИ РЕЗЕРВНЫЙ КОД DISCORD" HorizontalAlignment="Center" Margin="23,181,23,0" VerticalAlignment="Top" Height="25" Foreground="#FF8A8E93" FontSize="11" FontWeight="Bold"/>
                <Label x:Name="CodeLabelInfo" Content="" HorizontalAlignment="Left" Margin="29,200,0,0" VerticalAlignment="Top" Height="22" Foreground="#FFF04D47" FontSize="10" FontStyle="Italic"/>
                <Button x:Name="ButtonLoginCode" Background="#7289da" Foreground="White" BorderBrush="Transparent" Content="Вход" FontSize="14" FontWeight="Bold" HorizontalAlignment="Center" Margin="22,276,22,0" VerticalAlignment="Top" Width="376" Height="42" Style="{DynamicResource ButtonStyleBlue}" Click="ButtonLoginCodeClick"/>
                <TextBlock x:Name="FormCaption" HorizontalAlignment="Center" Margin="22,144,22,0" VerticalAlignment="Top" Foreground="#FFB8B8B8" Width="376" Height="36" TextWrapping="Wrap" TextAlignment="Center" Text="Вы можете использовать резервный код или своё мобильное приложение двухфакторной аутентификации."/>
                <TextBlock Text="Получить код авторизации по SMS" HorizontalAlignment="Left" Margin="26,325,0,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FF6A7EC5" Width="210" Height="16" FontWeight="Bold" MouseLeftButtonUp="MFAuthSendSMS" >
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property= "Foreground" Value="{x:Null}"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="TextDecorations" Value="Underline"/>
                                    <Setter Property="Cursor" Value="Hand"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <TextBlock Text="Вернуться ко входу" HorizontalAlignment="Left" Margin="26,346,0,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FF6A7EC5" Width="119" Height="16" FontWeight="Bold" MouseLeftButtonUp="BackToLoginClick" >
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property= "Foreground" Value="{x:Null}"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="TextDecorations" Value="Underline"/>
                                    <Setter Property="Cursor" Value="Hand"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <Image Height="84" Margin="148,24,148,0" VerticalAlignment="Top" Width="124" Source="Resources/ImageCode.png" HorizontalAlignment="Center"/>
                <TextBlock x:Name="cat_emotion_code" HorizontalAlignment="Center" Margin="0,113,0,0" VerticalAlignment="Top" Foreground="#FFB8B8B8" Width="368" Height="36" TextWrapping="Wrap" TextAlignment="Center" Text="Двухфакторная аутентификация" FontSize="20" FontWeight="Bold"/>
                <Image x:Name="cat_code" Source="/Resources/pixel_cat_sit.png" Margin="318,69,0,0" HorizontalAlignment="Left" Width="66" Height="60" VerticalAlignment="Top" Cursor="Hand" MouseUp="CatCodeClick"/>
            </Grid>
        </Canvas>

        <Canvas x:Name="ContentForm" Visibility="Hidden" Width="{Binding ActualWidth, ElementName=ActualSize, Mode=OneWay}" Height="{Binding ActualHeight, ConverterParameter=60, Converter={converters:MinusConverter}, ElementName=ActualSize}" Margin="0,20,0,0" VerticalAlignment="Top">
            <!--BEGIN Костыль для круглого угла-->
            <Ellipse Stroke="#FF202225" Width="20" Height="20" Canvas.Left="67" Canvas.Top="-5" StrokeThickness="5" />
            <Rectangle Fill="#36393f" Width="10" Height="15" Canvas.Left="77" StrokeThickness="5"/>
            <Rectangle Fill="#36393f" Width="5" Height="9" Canvas.Left="72" StrokeThickness="5" Canvas.Top="6"/>
            <!-- Костыль для круглого угла END-->

            <controls:SmoothScrollViewer Visibility="Hidden" x:Name="Visualiser" Margin="0" Style="{DynamicResource ScrollViewerControlTemplateDiscord}" Width="{Binding ActualWidth, ElementName=ActualSize}" Height="{Binding ActualHeight, ConverterParameter=20, Converter={converters:MinusConverter}, ElementName=ActualSize}" HorizontalAlignment="Left" ScrollChanged="Visualiser_ScrollChanged">
                <Grid Width="{Binding ActualWidth, ElementName=ActualSize, Mode=OneWay}" Height="Auto" SizeChanged="VisualizerSizeChanged">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="72"/>
                        <ColumnDefinition Width="370*"/>
                        <ColumnDefinition MinWidth="540" Width="540*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition MinHeight="580" Height="*"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="72"/>
                    </Grid.RowDefinitions>

                    <TextBlock Margin="5" Grid.ColumnSpan="2" Grid.Column="1" Foreground="White" TextWrapping="Wrap" TextAlignment="Center" Text="Статус визуализатор" FontSize="20" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                    <TextBlock Margin="5,35,5,5" Grid.ColumnSpan="2" Grid.Column="1"  Foreground="#FFB9B9BE" TextWrapping="Wrap" TextAlignment="Center" Text="Здесь вы може увидеть как будет выглядеть ваш статус." FontSize="14" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Top"/>

                    <TabControl x:Name="VisualiserTabControl" Grid.Row="1" Margin="10,10,10,10" Style="{DynamicResource TabControlStyleDiscord}" Background="#FF18191C" Grid.Column="1" Grid.ColumnSpan="2">
                        <TabItem Header="Full Profile" Background="#FF18191C" Width="Auto" Style="{DynamicResource TabItemStyleDiscord}" BorderBrush="#FF7289DA">
                            <Grid Background="#FF18191C">
                                <Canvas Width="510" Height="500" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="110"/>
                                            <RowDefinition Height="130"/>
                                            <RowDefinition Height="260"/>
                                        </Grid.RowDefinitions>
                                        <!-- ZONE 1 -->
                                        <Border Background="#FF7289DA" Grid.Row="0" Width="510" CornerRadius="10,10,0,0"/>
                                        <Ellipse x:Name="VisualiserTabControlAvatar" Width="75" Height="75" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="18,0,0,0">
                                            <Ellipse.Fill>
                                                <ImageBrush ImageSource="Resources/default_avatar.png"/>
                                            </Ellipse.Fill>
                                        </Ellipse>
                                        <Ellipse Width="19" Height="19" Fill="#FF7289DA" HorizontalAlignment="Left" Margin="73.25,73,0,0" Stroke="#FF7289DA" VerticalAlignment="Top"/>
                                        <Ellipse Width="15" Height="15" Fill="#FF43B581" HorizontalAlignment="Left" Margin="75,75,0,0" Stroke="#FF80CFAA" VerticalAlignment="Top"/>
                                        <Canvas x:Name="gjmnaing4w79gny783">
                                            <Grid Height="{Binding ActualHeight, ElementName=gjmnaing4w79gny783}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition/>
                                                    <ColumnDefinition/>
                                                </Grid.ColumnDefinitions>
                                                <TextBlock x:Name="VisualiserTabControlNick" Text="Неопознаный Хомяк" Margin="110,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="18" FontWeight="Bold"/>
                                                <TextBlock x:Name="VisualiserTabControlDiscriminator" Text="#1234" Margin="3,6,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="14" Foreground="#FFC4CCF0" Grid.Column="1" FontWeight="Normal"/>
                                            </Grid>
                                        </Canvas>

                                        <!-- ZONE 2 -->
                                        <Grid x:Name="grid1" Grid.Row="1">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="112"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Rectangle Fill="#FF6C82CF" VerticalAlignment="Top" Height="{Binding ActualHeight, ElementName=grid1, Mode=OneWay}" Margin="0,-1,0,0" Grid.ColumnSpan="2" Grid.RowSpan="6"/>
                                            <TextBlock Text="Играет в игру" Margin="17,20,0,6" HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="13" FontWeight="Bold" Height="16" Grid.Row="0" Width="87"/>

                                            <!-- LargeImage -->

                                            <!-- LargeImage -->
                                            <Grid x:Name="VisualiserTabControlGameAvatar_HelpText" IsHitTestVisible="False" Opacity="0" Width="{Binding ActualWidth, ConverterParameter=-5, Converter={converters:MinusConverter}, ElementName=LargeImageTextPresenter}"  Height="{Binding ActualHeight, ConverterParameter=-5, Converter={converters:MinusConverter}, ElementName=LargeImageTextPresenter}" RenderTransformOrigin="0.5,1" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="54.5,5,0,0" Grid.RowSpan="22" Grid.ColumnSpan="22">
                                                <Grid.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform ScaleX="0.8" ScaleY="0.8"/>
                                                        <SkewTransform/>
                                                        <RotateTransform/>
                                                        <TranslateTransform X="{Binding ActualWidth, ConverterParameter=-0\,5, Converter={converters:PercentageConverter}, ElementName=VisualiserTabControlGameAvatar_HelpText}"/>
                                                    </TransformGroup>
                                                </Grid.RenderTransform>
                                                <Rectangle Fill="Black" Margin="0,0,0,-2" HorizontalAlignment="Center" VerticalAlignment="Bottom" Height="5" Width="5" RenderTransformOrigin="0.5,0.5" >
                                                    <Rectangle.RenderTransform>
                                                        <RotateTransform Angle="45"/>
                                                    </Rectangle.RenderTransform>
                                                </Rectangle>
                                                <Rectangle RadiusX="4" RadiusY="4" Fill="Black" Width="{Binding ActualWidth, ElementName=VisualiserTabControlGameAvatar_HelpText}" Height="{Binding ActualHeight, ElementName=VisualiserTabControlGameAvatar_HelpText}" HorizontalAlignment="Stretch"/>
                                                <TextBlock x:Name="LargeImageTextPresenter" Padding="4,4,4,4" Text="{Binding Text, ElementName=VisualiserImageLargeText}" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White" FontSize="14"/>
                                            </Grid>

                                            <Rectangle x:Name="VisualiserTabControlGameAvatar" MouseEnter="HelpText_MouseEnter" MouseLeave="HelpText_MouseLeave" RadiusX="5" RadiusY="5" Width="75" Height="75" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="17,0,0,0" Grid.RowSpan="22" Grid.Row="1" AutomationProperties.HelpText="123"/>
                                            <!-- SmallImage -->
                                            <Grid x:Name="VisualiserTabControlGameSmallAvatar_HelpText" IsHitTestVisible="False" Opacity="0" Width="{Binding ActualWidth, ConverterParameter=-5, Converter={converters:MinusConverter}, ElementName=SmallImageTextPresenter}"  Height="{Binding ActualHeight, ConverterParameter=-5, Converter={converters:MinusConverter}, ElementName=SmallImageTextPresenter}" RenderTransformOrigin="0.5,1" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="88,1,0,0" Grid.RowSpan="2" Grid.Row="2" Grid.ColumnSpan="22">
                                                <Grid.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform ScaleX="0.8" ScaleY="0.8"/>
                                                        <SkewTransform/>
                                                        <RotateTransform/>
                                                        <TranslateTransform X="{Binding ActualWidth, ConverterParameter=-0\,5, Converter={converters:PercentageConverter}, ElementName=VisualiserTabControlGameSmallAvatar_HelpText}"/>
                                                    </TransformGroup>
                                                </Grid.RenderTransform>
                                                <Rectangle Fill="Black" Margin="0,0,0,-2" HorizontalAlignment="Center" VerticalAlignment="Bottom" Height="5" Width="5" RenderTransformOrigin="0.5,0.5" >
                                                    <Rectangle.RenderTransform>
                                                        <RotateTransform Angle="45"/>
                                                    </Rectangle.RenderTransform>
                                                </Rectangle>
                                                <Rectangle RadiusX="4" RadiusY="4" Fill="Black" Width="{Binding ActualWidth, ElementName=VisualiserTabControlGameSmallAvatar_HelpText}" Height="{Binding ActualHeight, ElementName=VisualiserTabControlGameSmallAvatar_HelpText}" HorizontalAlignment="Stretch"/>
                                                <TextBlock x:Name="SmallImageTextPresenter" Padding="4,4,4,4" Text="{Binding Text, ElementName=VisualiserImageSmallText}" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White" FontSize="14"/>
                                            </Grid>

                                            <Rectangle x:Name="VisualiserTabControlGameSmallAvatar" MouseEnter="HelpText_MouseEnter" MouseLeave="HelpText_MouseLeave" RadiusX="50" RadiusY="50" Width="32" Height="32" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="70,52,0,0" Grid.RowSpan="22" Grid.Row="1" AutomationProperties.HelpText="123"/>
                                            <!-- SmallImage -->

                                            <TextBlock x:Name="VisualiserTabControlGameName" Text="{Binding Text, ElementName=VisualiserGameName}" Margin="0,-2,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="14" FontWeight="Bold" Grid.Column="1" Grid.Row="1"/>
                                            <TextBlock x:Name="VisualiserTabControlGameDetails" Text="{Binding Text, ElementName=VisualiserDetails}" Margin="0" HorizontalAlignment="Left" FontSize="14" VerticalAlignment="Center" Grid.Column="1" Grid.Row="2" FontWeight="Normal"/>
                                            <TextBlock x:Name="VisualiserTabControlGameParty" Text="" Margin="0" HorizontalAlignment="Left" FontSize="14" VerticalAlignment="Center" Grid.Column="1" Grid.Row="3" FontWeight="Normal"/>
                                            <TextBlock x:Name="VisualiserTabControlGameTime" Text="" Margin="0" HorizontalAlignment="Left" FontSize="14" VerticalAlignment="Center" Grid.Column="1" Grid.Row="4" FontWeight="Normal"/>
                                        </Grid>

                                        <!-- ZONE 3 -->
                                        <Border Background="#FF2F3136" Grid.Row="2" Width="510" CornerRadius="0,0,10,10"/>
                                        <TabControl Grid.Row="2" Margin="0,-4,0,0" Padding="0,0,0,0" Style="{DynamicResource TabControlStyleDiscord}" Background="#FF2F3136" Foreground="#FF6C82CF" BorderBrush="White">
                                            <TabItem Header="User info" Background="#FF2F3136" Width="Auto" Style="{DynamicResource TabItemStyleDiscord}" IsSelected="True" Foreground="White" FontWeight="Normal" Margin="80,0,-80,-6" BorderBrush="White" Height="42"/>
                                            <TabItem Header="Mutual Servers" Background="#FF2F3136" Width="Auto" Style="{DynamicResource TabItemStyleDiscord}" IsSelected="True" Foreground="White" FontWeight="Normal" Margin="80,0,-80,-6" BorderBrush="White" Height="42"/>
                                            <TabItem Header="Mutual Friends" Background="#FF2F3136" Width="Auto" Style="{DynamicResource TabItemStyleDiscord}" IsSelected="True" Foreground="White" FontWeight="Normal" Margin="80,0,-80,-6" BorderBrush="White" Height="42"/>
                                        </TabControl>
                                        <Rectangle Fill="#FF7289DA" VerticalAlignment="Top" Height="1" Margin="0" Grid.ColumnSpan="2" Grid.RowSpan="22" Grid.Row="2"/>
                                    </Grid>
                                </Canvas>
                                <Rectangle Margin="0,254,0,0" IsHitTestVisible="False" Width="{Binding ActualWidth, ElementName=VisualiserTabControl}">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="Black" Offset="1"/>
                                            <GradientStop Color="#00000000"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                        </TabItem>

                        <TabItem Header="User Popout" Background="#FF18191C" Width="Auto" Style="{DynamicResource TabItemStyleDiscord}" BorderBrush="#FF7289DA">
                            <Grid Background="#FF18191C">
                                <Image Source="/Resources/ImageCode.png" />
                            </Grid>
                        </TabItem>
                    </TabControl>

                    <Grid x:Name="VisualiserOptions" Grid.Column="1" Grid.Row="3" Grid.ColumnSpan="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid x:Name="Profiles" Grid.ColumnSpan="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="20"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="25"/>
                            </Grid.RowDefinitions>
                            <TextBlock Text="Профили:" Margin="20,0,10,0" VerticalAlignment="Center" HorizontalAlignment="Center" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                            <RadioButton x:Name="ndef" Content="Default" FontWeight="Bold" Foreground="White" Style="{DynamicResource RadioButtonStyleBlueGreen}" GroupName="Profiles" Grid.Column="1" Checked="ProfileCheckedChange" IsChecked="True"/>
                            <RadioButton x:Name="n1" Content="1" FontWeight="Bold" Foreground="White" Style="{DynamicResource RadioButtonStyleBlueGreen}" GroupName="Profiles" Grid.Column="2" Checked="ProfileCheckedChange"/>
                            <RadioButton x:Name="n2" Content="2" FontWeight="Bold" Foreground="White" Style="{DynamicResource RadioButtonStyleBlueGreen}" GroupName="Profiles" Grid.Column="3" Checked="ProfileCheckedChange"/>
                            <RadioButton x:Name="n3" Content="3" FontWeight="Bold" Foreground="White" Style="{DynamicResource RadioButtonStyleBlueGreen}" GroupName="Profiles" Grid.Column="4" Checked="ProfileCheckedChange"/>
                            <RadioButton x:Name="n4" Content="4" FontWeight="Bold" Foreground="White" Style="{DynamicResource RadioButtonStyleBlueGreen}" GroupName="Profiles" Grid.Column="5" Checked="ProfileCheckedChange"/>
                            <RadioButton x:Name="n5" Content="5" FontWeight="Bold" Foreground="White" Style="{DynamicResource RadioButtonStyleBlueGreen}" GroupName="Profiles" Grid.Column="6" Checked="ProfileCheckedChange"/>
                            <RadioButton x:Name="nclr" Content="Clear" FontWeight="Bold" Foreground="White" Style="{DynamicResource RadioButtonStyleBlueGreen}" GroupName="Profiles" Grid.Column="7" Checked="ProfileCheckedChange"/>
                        </Grid>
                        <!-- 0, 0 -->
                        <TextBlock Text="GAME" Grid.Column="0" Grid.Row="1" Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="VisualiserGameName" Grid.Column="0" Grid.Row="1" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10" TextChanged="AutoUpdateDiscord"/>
                        <!-- 0, 1 -->
                        <TextBlock Text="APPLICATION ID" Grid.Column="1" Grid.Row="1" Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="VisualiserApplicationID" Grid.Column="1" Grid.Row="1" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10" TextChanged="VisualiserApplicationIDTextChanged"/>
                        <!-- 1, 0 -->
                        <TextBlock Text="STATE" Grid.Column="0" Grid.Row="2" Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="VisualiserState" Grid.Column="0" Grid.Row="2" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10" TextChanged="VisualizerStateTextChanged"/>
                        <!-- 1, 1 -->
                        <TextBlock Text="DETAILS" Grid.Column="1" Grid.Row="2"  Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="VisualiserDetails" Grid.Column="1" Grid.Row="2" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10" TextChanged="AutoUpdateDiscord"/>
                        <!-- 2, 0 -->
                        <TextBlock Text="START TIMESTAMP" Grid.Column="0" Grid.Row="3"  Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="Visualiser_Timestamp_Start" Grid.Column="0" Grid.Row="3" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10" TextChanged="VisualizerTimeTextChanged"/>
                        <!-- 2, 1 -->
                        <TextBlock Text="END TIMESTAMP" Grid.Column="1" Grid.Row="3"  Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="Visualiser_Timestamp_End" Grid.Column="1" Grid.Row="3" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10" TextChanged="VisualizerTimeTextChanged"/>
                        <!-- 3, 0 -->
                        <TextBlock Text="PARTY SIZE" Grid.Column="0" Grid.Row="4"  Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="VisualiserPartySize" Grid.Column="0" Grid.Row="4" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10"  TextChanged="VisualizerStateTextChanged"/>
                        <!-- 3, 1 -->
                        <TextBlock Text="PARTY MAX" Grid.Column="1" Grid.Row="4"  Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="VisualiserPartyMax" Grid.Column="1" Grid.Row="4" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10"  TextChanged="VisualizerStateTextChanged"/>
                        <!-- 4, 0 -->
                        <TextBlock Text="IMAGE LARGE KEY" Grid.Column="0" Grid.Row="5"  Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="VisualiserImageLargeKey" Grid.Column="0" Grid.Row="5" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10"  TextChanged="VisualiserApplicationIDTextChanged"/>
                        <!-- 4, 1 -->
                        <TextBlock Text="IMAGE LARGE TEXT" Grid.Column="1" Grid.Row="5"  Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="VisualiserImageLargeText" Grid.Column="1" Grid.Row="5" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10"  TextChanged="VisualiserApplicationIDTextChanged"/>
                        <!-- 5, 0 -->
                        <TextBlock Text="IMAGE SMALL KEY" Grid.Column="0" Grid.Row="6"  Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="VisualiserImageSmallKey" Grid.Column="0" Grid.Row="6" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10"  TextChanged="VisualiserApplicationIDTextChanged"/>
                        <!-- 5, 1 -->
                        <TextBlock Text="IMAGE SMALL TEXT" Grid.Column="1" Grid.Row="6"  Margin="20,10,10,0" VerticalAlignment="Top" Background="#00000000" Foreground="#FFADBBBE" Height="16" FontWeight="Bold"/>
                        <TextBox x:Name="VisualiserImageSmallText" Grid.Column="1" Grid.Row="6" Height="37" TextWrapping="Wrap" VerticalAlignment="Bottom" FontSize="14" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" Margin="10,28,10,10"  TextChanged="VisualiserApplicationIDTextChanged"/>
                    </Grid>
                </Grid>
            </controls:SmoothScrollViewer>

            <controls:SmoothScrollViewer Visibility="Hidden" x:Name="Settings" Margin="0" Style="{DynamicResource ScrollViewerControlTemplateDiscord}" Width="{Binding ActualWidth, ElementName=ActualSize}" Height="{Binding ActualHeight, ConverterParameter=20, Converter={converters:MinusConverter}, ElementName=ActualSize}" HorizontalAlignment="Left">
                <Grid Width="{Binding ActualWidth, ElementName=ActualSize, Mode=OneWay}" Height="Auto">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="72"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="660"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="72"/>
                    </Grid.RowDefinitions>

                    <TextBlock Text="Основные" Margin="0,20" Foreground="White" FontSize="18" FontWeight="Bold" Grid.Column="2"/>
                    <TextBlock Text="Громкость звуков" Margin="0,5,0,5" Foreground="#FF8A8E93" FontSize="13" FontWeight="Bold" Grid.Column="2" Grid.Row="1" VerticalAlignment="Center"/>
                    <Slider x:Name="Volume" Grid.Row="2" Grid.Column="2" Margin="0,0,0,0" Maximum="100" Minimum="0" Value="50" ValueChanged="VolumeChanged" PreviewMouseUp="Volume_MouseUp" Style="{DynamicResource SliderStyleDiscord}"/>

                    <Grid Grid.Row="3" Grid.Column="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle Fill="#FF42454A" Height="1" Grid.Row="0" Margin="0,15" VerticalAlignment="Center"/>
                        <CheckBox x:Name="AutoRun" Content="Открыть при загрузке Windows" VerticalAlignment="Top" Grid.Row="1" Style="{DynamicResource CheckBoxStyleDiscord}" FontWeight="Bold" VerticalContentAlignment="Center" FontSize="14" Checked="AutoRunChecked" Click="AutoRunClick"/>
                        <Rectangle Fill="#FF42454A" Height="1" Grid.Row="2" Margin="0,15" VerticalAlignment="Center"/>
                    </Grid>

                    <Grid Grid.Row="4" Grid.Column="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <CheckBox x:Name="StreamStatusDiscord" Content="Транслировать статус в Discord" VerticalAlignment="Top" Grid.Row="1" Grid.Column="2" Style="{DynamicResource CheckBoxStyleDiscord}" FontWeight="Bold" VerticalContentAlignment="Center" FontSize="14" Checked="StreamStatusDiscordChecked" Click="StreamStatusDiscordClick"/>
                        <Rectangle Fill="#FF42454A" Height="1" Grid.Row="2" Margin="0,15" VerticalAlignment="Center"/>
                    </Grid>

                    <TextBlock Text="Обновление статуса" Margin="0,5,0,5" Foreground="#FF8A8E93" FontSize="13" FontWeight="Bold" Grid.Column="2" Grid.Row="6" VerticalAlignment="Center"/>
                    <ComboBox Grid.Column="2" Grid.Row="7" x:Name="UpdateType" Margin="0,5,0,0" Width="660"  HorizontalAlignment="Left" SelectedIndex="0" VerticalContentAlignment="Center" SelectionChanged="UpdateTypeSelectionChanged" >
                        <TextBlock Text="Автоматически" Foreground="Black" FontSize="12" FontWeight="Bold" Grid.Column="2"/>
                        <TextBlock Text="Вручную" Foreground="Black" FontSize="12" FontWeight="Bold" Grid.Column="2"/>
                        <TextBlock Text="Каждые N секунд" Foreground="Black" FontSize="12" FontWeight="Bold" Grid.Column="2"/>
                    </ComboBox>
                    <TextBox x:Name="UpdateN" Margin="0,5,0,0" Grid.Column="2" Width="660" HorizontalAlignment="Left" Text="1000" TextWrapping="Wrap" Padding="5" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" VerticalAlignment="Bottom" FontSize="11" Grid.Row="8"/>
                    <!--
                    <Rectangle Fill="#FF42454A" Height="1" Grid.Row="9" Grid.Column="2" Margin="0,15" VerticalAlignment="Center"></Rectangle>
                    <TextBlock Text="Папка игры" Margin="0,5,0,5" Foreground="#FF8A8E93" FontSize="13" FontWeight="Bold" Grid.Column="2" Grid.Row="10" VerticalAlignment="Center"/>
                    <TextBox x:Name="GamePath" IsReadOnly="True" Grid.Column="2" Width="640" HorizontalAlignment="Left" Text="" TextWrapping="Wrap" Padding="5" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" VerticalAlignment="Bottom" FontSize="11" Grid.Row="11" TextChanged="GamePathTextChanged" Margin="0,5,0,0"/>
                    <Button Background="#7289da" Foreground="White" BorderBrush="Transparent" Content="↻" FontSize="14" FontWeight="Bold" HorizontalAlignment="Right" Width="20" Style="{DynamicResource ButtonStyleBlue}" Grid.Column="2" Grid.Row="11" Click="RefindGameClick" Margin="0,5,0,0"/>
                    -->
                    <TextBlock Text="Подключенные аккаунты" Margin="0,20" Foreground="White" FontSize="18" FontWeight="Bold" Grid.Column="2" Grid.Row="15"/>
                    <Grid Grid.Row="16" Grid.Column="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Button x:Name="AuthDiscord" Background="#7289da" Foreground="White" BorderBrush="Transparent" Content="Discord" FontSize="14" FontWeight="Bold" HorizontalAlignment="Left" Margin="0,0,10,0" VerticalAlignment="Top" Width="94" Height="33" Style="{DynamicResource ButtonStyleBlue}" Click="AuthDiscordClick"/>
                        <Button x:Name="AuthMyGames" Background="#7289da" Grid.Column="1" Foreground="White" BorderBrush="Transparent" Content="MyGames" FontSize="14" FontWeight="Bold" HorizontalAlignment="Left" Margin="10,0,10,0" VerticalAlignment="Top" Width="94" Height="33" Style="{DynamicResource ButtonStyleBlue}" Click="AuthMyGamesClick"/>
                    </Grid>
                </Grid>
            </controls:SmoothScrollViewer>

            <controls:SmoothScrollViewer Visibility="Hidden" x:Name="WarfaceScr" Margin="0" Style="{DynamicResource ScrollViewerControlTemplateDiscord}" Width="{Binding ActualWidth, ElementName=ActualSize}" Height="{Binding ActualHeight, ConverterParameter=20, Converter={converters:MinusConverter}, ElementName=ActualSize}" HorizontalAlignment="Left">
                <Grid Width="{Binding ActualWidth, ElementName=ActualSize, Mode=OneWay}" Height="Auto">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="72"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="660"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="72"/>
                    </Grid.RowDefinitions>

                    <Grid Grid.Column="2" Grid.Row="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TextBlock Margin="5" Foreground="White" TextWrapping="Wrap" TextAlignment="Center" Text="Warface" FontSize="20" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                        <TextBlock Margin="15,35,5,5" Foreground="#FFB9B9BE" TextWrapping="Wrap" TextAlignment="Center" Text="Используйте эти строки, чтобы транслировать ваш статус из игры:" FontSize="14" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                        <DataGrid Grid.Column="1" Grid.ColumnSpan="3" Margin="10" IsReadOnly="True" ColumnWidth="*" Grid.Row="1" Loaded="WarfacePropDataGrid_Loaded" Style="{DynamicResource DataGridStyleDiscord}"/>
                    </Grid>
                    <Grid Grid.Column="2" Grid.Row="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TextBlock Text="Cобытие &quot;Темные самураи&quot;" Margin="0,20" Foreground="White" FontSize="18" FontWeight="Bold" Grid.Column="2" Grid.Row="0"/>
                        <CheckBox x:Name="NotifyOnNewCase" Content="Получать звуковые уведомления, если доступны кейсы" Margin="0,0,0,0" VerticalAlignment="Top" Grid.Row="1" Grid.Column="2" Style="{DynamicResource CheckBoxStyleDiscord}" FontWeight="Bold" VerticalContentAlignment="Center" FontSize="14" Click="NotifyOnNewCaseClick" Checked="NotifyOnNewCaseChecked"/>
                    </Grid>
                    <Grid Grid.Column="2" Grid.Row="3">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TextBlock Text="Аналитика матчей" Margin="0,20" Foreground="White" FontSize="18" FontWeight="Bold" Grid.Column="2" Grid.Row="0"/>
                        <DataGrid x:Name="AnalyticsDataGrid" Grid.Column="1" Grid.ColumnSpan="3" Margin="10" Loaded="AnalyticsDataGrid_Loaded" IsReadOnly="True" ColumnWidth="*" Grid.Row="1" Style="{DynamicResource DataGridStyleDiscord}"/>
                    </Grid>
                </Grid>
            </controls:SmoothScrollViewer>

            <controls:SmoothScrollViewer Visibility="Hidden" x:Name="Console" Margin="0" Style="{DynamicResource ScrollViewerControlTemplateDiscord}" Width="{Binding ActualWidth, ElementName=ActualSize}" Height="{Binding ActualHeight, ConverterParameter=20, Converter={converters:MinusConverter}, ElementName=ActualSize}" HorizontalAlignment="Left">
                <Grid x:Name="grid2" Width="{Binding ActualWidth, ElementName=ActualSize, Mode=OneWay}" Height="Auto">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="72"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Rectangle Fill="#FF0088FF" Grid.Column="1" RadiusX="10" RadiusY="10" Margin="10"/>
                    <TextBox Margin="10,0,10,10" Grid.Column="1" TextWrapping="Wrap" x:Name="console" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" VerticalAlignment="Top" Text="[HELLO]" FontSize="11" Height="{Binding ActualHeight, ConverterParameter=60, Converter={converters:MinusConverter}, ElementName=ActualSize}" IsReadOnly="True" IsReadOnlyCaretVisible="True" TextChanged="console_TextChanged"/>
                    <TextBox Margin="10,0,10,10" Grid.Column="1" TextWrapping="Wrap" Padding="7" Background="#FF313339" Foreground="LightGray" Style="{DynamicResource TextBoxRounded}" VerticalAlignment="Bottom" FontSize="11"/>
                </Grid>
            </controls:SmoothScrollViewer>

            <!-- Width="{Binding ActualWidth, ElementName=ActualSize, Mode=OneWay}" -->
            <controls:SmoothScrollViewer x:Name="ScrollMenu" Padding="0,0,-99999,0" VerticalScrollBarVisibility="Hidden" HorizontalScrollBarVisibility="Hidden" Margin="0" Style="{DynamicResource ScrollViewerControlTemplateDiscord}" CanContentScroll="False" Grid.RowSpan="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="72">
                <Canvas x:Name="CanvasMenu" Width="72" Height="{Binding ActualHeight, ConverterParameter=20, Converter={converters:MinusConverter}, ElementName=ActualSize}" HorizontalAlignment="Left" VerticalAlignment="Top">
                    <Rectangle Fill="#FF202225" Width="{Binding ActualWidth, ElementName=CanvasMenu, Mode=OneWay}" Height="{Binding ActualHeight, ElementName=CanvasMenu, Mode=OneWay}"/>
                    <Grid x:Name="GridMenu" Width="{Binding ActualWidth, ElementName=CanvasMenu, Mode=OneWay}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="58"/>
                            <RowDefinition Height="58"/>
                            <RowDefinition Height="58"/>
                            <RowDefinition Height="58"/>
                            <RowDefinition Height="58"/>
                        </Grid.RowDefinitions>

                        <RadioButton x:Name="MenuVisualiser" IsChecked="True" Content="Статус визуализатор"  Width="50" Height="50" Style="{DynamicResource RadioButtonStyleRounded}" GroupName="GroupMenu" Checked="VisualiserCheck" >
                            <RadioButton.Background>
                                <ImageBrush ImageSource="Resources/vizualizer_hi_no_bg.png">
                                    <ImageBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterY="0.5" CenterX="0.5" ScaleX="0.4" ScaleY="0.4"/>
                                            <SkewTransform CenterY="0.5" CenterX="0.5"/>
                                            <RotateTransform CenterY="0.5" CenterX="0.5"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </ImageBrush.RelativeTransform>
                                </ImageBrush>
                            </RadioButton.Background>
                        </RadioButton>
                        <RadioButton x:Name="MenuSettings" Content="Настройки" Grid.Row="1" Width="50" Height="50" Style="{DynamicResource RadioButtonStyleRounded}" GroupName="GroupMenu" Checked="SettindsCheck" >
                            <RadioButton.Background>
                                <ImageBrush ImageSource="Resources/settings_hi_no_bg.png">
                                    <ImageBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterY="0.5" CenterX="0.5" ScaleX="0.5" ScaleY="0.55"/>
                                            <SkewTransform CenterY="0.5" CenterX="0.5"/>
                                            <RotateTransform CenterY="0.5" CenterX="0.5"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </ImageBrush.RelativeTransform>
                                </ImageBrush>
                            </RadioButton.Background>
                        </RadioButton>
                        <RadioButton x:Name="MenuWarface" Content="Warface" Grid.Row="2" Width="50" Height="50" Style="{DynamicResource RadioButtonStyleRounded}" GroupName="GroupMenu" Checked="WarfaceScrCheck" >
                            <RadioButton.Background>
                                <ImageBrush ImageSource="Resources/logowf.png">
                                    <ImageBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterY="0.5" CenterX="0.5" ScaleX="0.5" ScaleY="0.55"/>
                                            <SkewTransform CenterY="0.5" CenterX="0.5"/>
                                            <RotateTransform CenterY="0.5" CenterX="0.5"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </ImageBrush.RelativeTransform>
                                </ImageBrush>
                            </RadioButton.Background>
                        </RadioButton>
                        <RadioButton x:Name="MenuConsole" Content="Консоль разработчика" Grid.Row="3" Width="50" Height="50" Style="{DynamicResource RadioButtonStyleRounded}" GroupName="GroupMenu" Checked="ConsoleCheck" >
                            <RadioButton.Background>
                                <ImageBrush ImageSource="Resources/cmd-png.png">
                                    <ImageBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterY="0.5" CenterX="0.5" ScaleX="0.5" ScaleY="0.55"/>
                                            <SkewTransform CenterY="0.5" CenterX="0.5"/>
                                            <RotateTransform CenterY="0.5" CenterX="0.5"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </ImageBrush.RelativeTransform>
                                </ImageBrush>
                            </RadioButton.Background>
                        </RadioButton>
                    </Grid>
                </Canvas>
            </controls:SmoothScrollViewer>
        </Canvas>

        <Image x:Name="BG_Plug" Visibility="Hidden" Source="Resources/bg_plug.png"
               Width="{Binding ActualWidth, ConverterParameter=1\,5, Converter={converters:PercentageConverter}, ElementName=ActualSize}"
               Height="{Binding ActualHeight, ConverterParameter=1\,5, Converter={converters:PercentageConverter}, ElementName=ActualSize}"
               Margin="-1600,-900,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"/>

        <Canvas x:Name="SaveChangesBox" HorizontalAlignment="Center" Width="{Binding ActualWidth, ConverterParameter=112, Converter={converters:MinusConverter}, ElementName=ActualSize}"  Height="52" VerticalAlignment="Bottom" Margin="72,0,0,20" RenderTransformOrigin="0.5,0.5">
            <Canvas.RenderTransform>
                <TranslateTransform Y="72"/>
            </Canvas.RenderTransform>
            <Grid Width="{Binding ActualWidth, ElementName=SaveChangesBox}" Height="{Binding ActualHeight, ElementName=SaveChangesBox}">
                <Border Background="Black" Opacity="0.7" CornerRadius="5,5,5,5" Grid.ColumnSpan="2"/>
                <TextBlock Text="Вы забыли сохранить изменения!" Margin="20,17,0,16" Foreground="White" FontSize="14" FontWeight="Bold" VerticalAlignment="Center" Grid.ColumnSpan="2"/>
                <Button x:Name="SaveChangesBoxButtonSave" Background="#4f8754" Foreground="White" BorderBrush="Transparent" Content="Сохранить изменения" FontSize="13" FontWeight="Bold" HorizontalAlignment="Right" Margin="0,10,10,10" Width="168" Style="{DynamicResource ButtonStyleGreen}"/>
                <TextBlock x:Name="SaveChangesBoxButtonReset" Text="Сброс" HorizontalAlignment="Right" Margin="0,17,189,17" VerticalAlignment="Center" Foreground="White" FontWeight="Bold" FontSize="13" >
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property= "Foreground" Value="{x:Null}"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="TextDecorations" Value="Underline"/>
                                    <Setter Property="Cursor" Value="Hand"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </Grid>
        </Canvas>

        <Canvas x:Name="MessageBox" Opacity="0" Visibility="Hidden" Width="{Binding ActualWidth, ElementName=ActualSize, Mode=OneWay}" Height="{Binding ActualHeight, ElementName=ActualSize, Mode=OneWay}">
            <Grid x:Name="grid" Width="{Binding ActualWidth, ElementName=ActualSize, Mode=OneWay}" Height="{Binding ActualHeight, ElementName=ActualSize, Mode=OneWay}">
                <Rectangle Fill="#CC1D1D1D" VerticalAlignment="Stretch" />
                <Canvas Height="162" Width="440" RenderTransformOrigin="0.5,0.5">
                    <Grid x:Name="MessageBoxBody" Height="162" Width="440">
                        <Rectangle HorizontalAlignment="Left" Height="162" Margin="0" VerticalAlignment="Top" Width="440" Fill="#FF36393F" RadiusX="7" RadiusY="7"/>
                        <Rectangle HorizontalAlignment="Left" Height="44" Margin="0" VerticalAlignment="Bottom" Width="440" Fill="#FF2F3136" RadiusX="7" RadiusY="7"/>
                        <Button x:Name="MessageBoxButtonOk" Background="#7289da" Foreground="White" BorderBrush="Transparent" Content="Ок" FontSize="11" HorizontalAlignment="Right" Margin="0,0,16,6" VerticalAlignment="Bottom" Width="75" Height="29" Style="{DynamicResource ButtonStyleBlue}"/>
                        <Label x:Name="MessageBoxCaption" Content="Заголовок" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Top" Foreground="White" Width="420" FontSize="16" FontWeight="Bold" Height="33"/>
                        <controls:SmoothScrollViewer Style="{DynamicResource ScrollViewerControlTemplateDiscord}" CanContentScroll="False" Height="76" Margin="10,33,10,53">
                            <TextBlock TextWrapping="Wrap" Padding="3"  x:Name="MessageBoxContent" Text="Контент" HorizontalAlignment="Center" VerticalAlignment="Top" Height="Auto" Width="420" Foreground="#FFD0D1D3" FontSize="13"/>
                        </controls:SmoothScrollViewer>
                    </Grid>
                </Canvas>
            </Grid>
        </Canvas>

        <Canvas x:Name="TopPanel" Height="20" Width="{Binding ActualWidth, ElementName=ActualSize, Mode=OneWay}" HorizontalAlignment="Left" VerticalAlignment="Top">
            <Grid Height="20" Width="{Binding ActualWidth, ElementName=ActualSize, Mode=OneWay}">
                <Border Background="#FF202225" Width="{Binding ActualWidth, ElementName=ActualSize, Mode=OneWay}" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Top" MouseLeftButtonDown="WindowDragMove" HorizontalAlignment="Left" Margin="0">
                    <Canvas Height="20">
                        <Label Content="DISCORD STATUS" Margin="10,-2,0,0" FontFamily="/WarfaceStatusGUI;component/Resources/#New_Zelek" Background="#00000000" Foreground="#FF72767D" VerticalAlignment="Center" Height="22" Width="126" HorizontalAlignment="Left"/>
                        <TextBlock x:Name="TopStatus" Margin="140,0,0,0" Foreground="#FF515151" FontSize="10" VerticalAlignment="Center"/>
                    </Canvas>
                </Border>
                <Button Style="{StaticResource TopButtonMinimizeStyle}" HorizontalAlignment="Right" Margin="0,0,30,0" VerticalAlignment="Top" Height="20" Width="30" Background="#00000000">
                    <StackPanel Cursor="Hand">
                        <Image Source="Resources/BtnMaximize.png" MouseDown="MaximizeWindow"/>
                    </StackPanel>
                </Button>
                <Button Style="{StaticResource TopButtonMinimizeStyle}" HorizontalAlignment="Right" Margin="0,0,60,0" VerticalAlignment="Top" Height="20" Width="30" Background="#00000000">
                    <StackPanel Cursor="Hand">
                        <Image Source="Resources/BtnMinimize.png" MouseDown="MinimizeWindow"/>
                    </StackPanel>
                </Button>
                <Button Style="{StaticResource TopButtonCloseStyle}" HorizontalAlignment="Right" Margin="0" VerticalAlignment="Top" Height="20" Width="30" Background="#00000000">
                    <StackPanel Cursor="Hand">
                        <Image Source="Resources/BtnCloseWindow.png" MouseDown="CloseWindow"/>
                    </StackPanel>
                </Button>
            </Grid>
        </Canvas>

        <Popup x:Name="NotifyPopup" IsOpen="False" StaysOpen="False" Placement="MousePoint">
            <Border Background="White" BorderBrush="#FFDADCE0" BorderThickness="1" >
                <Grid Margin="1,3,1,3">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <Button Grid.Row="0" HorizontalContentAlignment="Left" Style="{DynamicResource ButtonStyleDiscordNotify}" Padding="30,3,5,3" IsEnabled="False" Content="Discord Status"/>
                    <Button Grid.Row="1" HorizontalContentAlignment="Left" Style="{DynamicResource ButtonStyleDiscordNotify}" Padding="30,3,5,3" PreviewMouseLeftButtonUp="HideNotifyMenu" Content="Hide this menu..."/>
                    <Rectangle Margin="0,5,0,5" Height="1" Grid.Row="2" Fill="#FFDADCE0"/>
                    <Button Grid.Row="3" HorizontalContentAlignment="Left" Style="{DynamicResource ButtonStyleDiscordNotify}" Padding="30,3,5,3" PreviewMouseLeftButtonUp="Button_PreviewMouseLeftButtonUp" Content="Выйти из Warface Status"/>
                </Grid>
            </Border>
        </Popup>
    </Grid>
</Window>
